/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GuiNetbean;

import Storage.AccountList;
import Storage.Statistics;
import java.awt.CardLayout;
import java.awt.Dimension;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.Enumeration;
import java.util.List;
import javax.swing.AbstractButton;
import javax.swing.ButtonGroup;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.labels.ItemLabelAnchor;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.ui.TextAnchor;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author theng
 */
public class StatisticalChartJPanel extends javax.swing.JPanel {

    /**
     * Creates new form StatisticalChartJPanel
     */
    public StatisticalChartJPanel() {
        Calendar cal = Calendar.getInstance();
        cal.setTime(new Date());
        cal.set(Calendar.HOUR_OF_DAY, 0);
        cal.set(Calendar.MINUTE, 0);
        cal.set(Calendar.SECOND, 0);
        cal.set(Calendar.MILLISECOND, 0);
        now = cal.getTime();

        initComponents();
        createDataset();
        initBarChart(chartPn);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        statisticsBy = new javax.swing.ButtonGroup();
        chartStyle = new javax.swing.ButtonGroup();
        optionPn = new javax.swing.JPanel();
        statisticsByPn = new javax.swing.JPanel();
        yearButton = new javax.swing.JRadioButton();
        monthButton = new javax.swing.JRadioButton();
        dayButton = new javax.swing.JRadioButton();
        allTimeButton = new javax.swing.JRadioButton();
        statisticsByLb = new javax.swing.JLabel();
        dayPn = new javax.swing.JPanel();
        fromLabel = new javax.swing.JLabel();
        jDateChooser = new com.toedter.calendar.JDateChooser();
        toLabel = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        monthPn = new javax.swing.JPanel();
        fromLabel2 = new javax.swing.JLabel();
        toLabel2 = new javax.swing.JLabel();
        jYearChooser3 = new com.toedter.calendar.JYearChooser();
        jYearChooser4 = new com.toedter.calendar.JYearChooser();
        jMonthChooser1 = new com.toedter.calendar.JMonthChooser();
        jMonthChooser2 = new com.toedter.calendar.JMonthChooser();
        yearPn = new javax.swing.JPanel();
        fromLabel1 = new javax.swing.JLabel();
        toLabel1 = new javax.swing.JLabel();
        jYearChooser1 = new com.toedter.calendar.JYearChooser();
        jYearChooser2 = new com.toedter.calendar.JYearChooser();
        jPanel1 = new javax.swing.JPanel();
        lineChartButton = new javax.swing.JRadioButton();
        barChartButton = new javax.swing.JRadioButton();
        chartStyleLabel = new javax.swing.JLabel();
        showButton = new javax.swing.JButton();
        chartPn = new javax.swing.JPanel();

        optionPn.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        statisticsBy.add(yearButton);
        yearButton.setText("Year");
        yearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearButtonActionPerformed(evt);
            }
        });

        statisticsBy.add(monthButton);
        monthButton.setText("Month");
        monthButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthButtonActionPerformed(evt);
            }
        });

        statisticsBy.add(dayButton);
        dayButton.setText("Day");
        dayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dayButtonActionPerformed(evt);
            }
        });

        statisticsBy.add(allTimeButton);
        allTimeButton.setSelected(true);
        allTimeButton.setText("All time");
        allTimeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allTimeButtonActionPerformed(evt);
            }
        });

        statisticsByLb.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        statisticsByLb.setText("Statistics by:");
        statisticsByLb.setToolTipText("");

        javax.swing.GroupLayout statisticsByPnLayout = new javax.swing.GroupLayout(statisticsByPn);
        statisticsByPn.setLayout(statisticsByPnLayout);
        statisticsByPnLayout.setHorizontalGroup(
            statisticsByPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statisticsByPnLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(statisticsByPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statisticsByLb)
                    .addComponent(yearButton)
                    .addComponent(allTimeButton)
                    .addComponent(dayButton)
                    .addComponent(monthButton))
                .addContainerGap(52, Short.MAX_VALUE))
        );
        statisticsByPnLayout.setVerticalGroup(
            statisticsByPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statisticsByPnLayout.createSequentialGroup()
                .addGap(0, 7, Short.MAX_VALUE)
                .addComponent(statisticsByLb)
                .addGap(13, 13, 13)
                .addGroup(statisticsByPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(statisticsByPnLayout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(yearButton))
                    .addComponent(allTimeButton)
                    .addGroup(statisticsByPnLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(dayButton))
                    .addGroup(statisticsByPnLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(monthButton))))
        );

        optionPn.add(statisticsByPn, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 140, 120));

        dayPn.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        fromLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        fromLabel.setText("From");
        fromLabel.setToolTipText("");
        dayPn.add(fromLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jDateChooser.setDate(now);
        dayPn.add(jDateChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 120, -1));
        jDateChooser.setDateFormatString("dd/MM/yyyy");
        jDateChooser1.setDateFormatString("dd/MM/yyyy");

        toLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        toLabel.setText("to");
        toLabel.setToolTipText("");
        dayPn.add(toLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, -1));

        jDateChooser1.setDate(now);
        dayPn.add(jDateChooser1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 120, -1));

        optionPn.add(dayPn, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 120, 140, 120));
        dayPn.setVisible(false);

        monthPn.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        fromLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        fromLabel2.setText("From");
        fromLabel2.setToolTipText("");
        monthPn.add(fromLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        toLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        toLabel2.setText("to");
        toLabel2.setToolTipText("");
        monthPn.add(toLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, -1, -1));
        monthPn.add(jYearChooser3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 60, -1));
        monthPn.add(jYearChooser4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 60, -1));
        monthPn.add(jMonthChooser1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, -1));
        monthPn.add(jMonthChooser2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, -1, -1));

        optionPn.add(monthPn, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 120, 140, 170));
        monthPn.setVisible(false);

        yearPn.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        fromLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        fromLabel1.setText("From");
        fromLabel1.setToolTipText("");
        yearPn.add(fromLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        toLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        toLabel1.setText("to");
        toLabel1.setToolTipText("");
        yearPn.add(toLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, -1));
        yearPn.add(jYearChooser1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 60, -1));
        yearPn.add(jYearChooser2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 60, -1));

        optionPn.add(yearPn, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 120, 140, 110));
        yearPn.setVisible(false);

        chartStyle.add(lineChartButton);
        lineChartButton.setText("Line chart");
        lineChartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineChartButtonActionPerformed(evt);
            }
        });

        chartStyle.add(barChartButton);
        barChartButton.setSelected(true);
        barChartButton.setText("Bar chart");
        barChartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barChartButtonActionPerformed(evt);
            }
        });

        chartStyleLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        chartStyleLabel.setText("Chart style:");
        chartStyleLabel.setToolTipText("");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chartStyleLabel)
                    .addComponent(lineChartButton)
                    .addComponent(barChartButton))
                .addContainerGap(57, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(chartStyleLabel)
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(lineChartButton))
                    .addComponent(barChartButton))
                .addGap(0, 7, Short.MAX_VALUE))
        );

        statisticsBy.add(dayButton);
        chartStyle.add(lineChartButton);
        chartStyle.add(barChartButton);

        optionPn.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 300, 140, 80));

        showButton.setText("Show");
        showButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showButtonActionPerformed(evt);
            }
        });
        optionPn.add(showButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 390, -1, -1));

        javax.swing.GroupLayout chartPnLayout = new javax.swing.GroupLayout(chartPn);
        chartPn.setLayout(chartPnLayout);
        chartPnLayout.setHorizontalGroup(
            chartPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 733, Short.MAX_VALUE)
        );
        chartPnLayout.setVerticalGroup(
            chartPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(optionPn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(chartPn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(optionPn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(chartPn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void barChartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barChartButtonActionPerformed
        initBarChart(chartPn);
    }//GEN-LAST:event_barChartButtonActionPerformed

    private void lineChartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineChartButtonActionPerformed
        initLineChart(chartPn);
    }//GEN-LAST:event_lineChartButtonActionPerformed

    private void showButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showButtonActionPerformed
        String select = getSelectedStatisticsBy(statisticsBy);
        switch (select) {
            case "All time":
                setAllTime();
                break;
            case "Day":
                setDayTime();
                break;
            case "Month":
                setMonthTime();
                break;
            case "Year":
                setYearTime();
                break;
        }
    }//GEN-LAST:event_showButtonActionPerformed

    private void allTimeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allTimeButtonActionPerformed
        dayPn.setVisible(false);
        monthPn.setVisible(false);
        yearPn.setVisible(false);
    }//GEN-LAST:event_allTimeButtonActionPerformed

    private void dayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dayButtonActionPerformed
        dayPn.setVisible(true);
        monthPn.setVisible(false);
        yearPn.setVisible(false);
    }//GEN-LAST:event_dayButtonActionPerformed

    private void monthButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthButtonActionPerformed
        dayPn.setVisible(false);
        monthPn.setVisible(true);
        yearPn.setVisible(false);
    }//GEN-LAST:event_monthButtonActionPerformed

    private void yearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearButtonActionPerformed
        dayPn.setVisible(false);
        monthPn.setVisible(false);
        yearPn.setVisible(true);
    }//GEN-LAST:event_yearButtonActionPerformed

    private JFreeChart barChart;
    private JFreeChart lineChart;
    DefaultCategoryDataset dataset;
    List<Statistics> listItem;
    private final Date now;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton allTimeButton;
    private javax.swing.JRadioButton barChartButton;
    private javax.swing.JPanel chartPn;
    private javax.swing.ButtonGroup chartStyle;
    private javax.swing.JLabel chartStyleLabel;
    private javax.swing.JRadioButton dayButton;
    private javax.swing.JPanel dayPn;
    private javax.swing.JLabel fromLabel;
    private javax.swing.JLabel fromLabel1;
    private javax.swing.JLabel fromLabel2;
    private com.toedter.calendar.JDateChooser jDateChooser;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JMonthChooser jMonthChooser1;
    private com.toedter.calendar.JMonthChooser jMonthChooser2;
    private javax.swing.JPanel jPanel1;
    private com.toedter.calendar.JYearChooser jYearChooser1;
    private com.toedter.calendar.JYearChooser jYearChooser2;
    private com.toedter.calendar.JYearChooser jYearChooser3;
    private com.toedter.calendar.JYearChooser jYearChooser4;
    private javax.swing.JRadioButton lineChartButton;
    private javax.swing.JRadioButton monthButton;
    private javax.swing.JPanel monthPn;
    private javax.swing.JPanel optionPn;
    private javax.swing.JButton showButton;
    private javax.swing.ButtonGroup statisticsBy;
    private javax.swing.JLabel statisticsByLb;
    private javax.swing.JPanel statisticsByPn;
    private javax.swing.JLabel toLabel;
    private javax.swing.JLabel toLabel1;
    private javax.swing.JLabel toLabel2;
    private javax.swing.JRadioButton yearButton;
    private javax.swing.JPanel yearPn;
    // End of variables declaration//GEN-END:variables

    private void createDataset() {
        AccountList list = new AccountList();
        listItem = list.getStatitical();
        dataset = new DefaultCategoryDataset();
    }

    private void initBarChart(javax.swing.JPanel chartPanel) {
        // Create barChart
        barChart = ChartFactory.createBarChart("Statistical Chart", "Time", "Number of Register", dataset,
                PlotOrientation.VERTICAL, false, true, true);

        CategoryItemRenderer renderer = ((CategoryPlot) barChart.getPlot()).getRenderer();
        renderer.setDefaultItemLabelGenerator(new StandardCategoryItemLabelGenerator());
        renderer.setDefaultItemLabelsVisible(true);
        ItemLabelPosition position = new ItemLabelPosition(ItemLabelAnchor.OUTSIDE12, TextAnchor.TOP_CENTER);
        renderer.setDefaultPositiveItemLabelPosition(position);

        ChartPanel panel = new ChartPanel(barChart);
        panel.setPreferredSize(new Dimension(chartPanel.getWidth(), chartPanel.getHeight()));

        chartPanel.removeAll();
        chartPanel.setLayout(new CardLayout());
        chartPanel.add(panel);
        chartPanel.validate();
        chartPanel.repaint();
    }

    private void initLineChart(javax.swing.JPanel chartPanel) {
        // Create lineChart
        lineChart = ChartFactory.createLineChart("Statistical Chart", // Chart title
                "Time", // X-Axis Label
                "Number of Register", // Y-Axis Label
                dataset, PlotOrientation.VERTICAL, false, true, true);

        CategoryPlot plot = (CategoryPlot) lineChart.getPlot();

        LineAndShapeRenderer renderer = (LineAndShapeRenderer) plot.getRenderer();
        renderer.setDefaultShapesVisible(true);
        DecimalFormat decimalformat1 = new DecimalFormat("##");
        renderer.setDefaultItemLabelGenerator(new StandardCategoryItemLabelGenerator("{2}", decimalformat1));
        renderer.setDefaultItemLabelsVisible(true);
        renderer.setDefaultSeriesVisible(true);

        ChartPanel panel = new ChartPanel(lineChart);
        panel.setPreferredSize(new Dimension(840, 450));
        panel.setPreferredSize(new Dimension(chartPanel.getWidth(), chartPanel.getHeight()));

        chartPanel.removeAll();
        chartPanel.setLayout(new CardLayout());
        chartPanel.add(panel);
        chartPanel.validate();
        chartPanel.repaint();
    }

    private String getSelectedStatisticsBy(ButtonGroup buttonGroup) {
        for (Enumeration<AbstractButton> buttons = buttonGroup.getElements(); buttons.hasMoreElements();) {
            AbstractButton button = buttons.nextElement();

            if (button.isSelected()) {
                return button.getText();
            }
        }
        return null;
    }

    private void setAllTime() {
        dataset.clear();
        for (Statistics i : listItem) {
            dataset.addValue(i.getCount(), "", i.getCreateDate());
        }
    }

    private void setYearTime() {
        dataset.clear();
        List<Statistics> yearList = new ArrayList<Statistics>();
        int year1 = jYearChooser1.getYear();
        int year2 = jYearChooser2.getYear();
        for (Statistics i : listItem) {
            Date t = i.getCreateDate();
            int year = getYear(t);
            if (year >= year1 && year <= year2) {
                if (!yearList.contains(i)) {
                    yearList.add(i);
                } else {
                    int index = yearList.indexOf(i);
                    Statistics newEle = yearList.get(index);
                    newEle = new Statistics(newEle.getCreateDate(), newEle.getCount());
                    newEle.add(i.getCount());
                    yearList.remove(index);
                    yearList.add(newEle);
                }
            }
        }
        while (year1 <= year2) {
            java.sql.Date t = setYear(year1);
            Statistics s = new Statistics(t, 0, 0);
            if (!yearList.contains(s)) {
                yearList.add(s);
            }
            year1 += 1;
        }
        Collections.sort(yearList);
        for (Statistics i : yearList) {
            dataset.addValue(i.getCount(), "", "" + i.getYear());
        }
    }

    private java.sql.Date setYear(int year) {
        Calendar cal = Calendar.getInstance();
        Date value;
        cal.set(Calendar.YEAR, year);
        value = cal.getTime();
        return new java.sql.Date(value.getTime());
    }

    private int getYear(Date date) {
        Calendar cal = Calendar.getInstance();
        cal.setTime(date);
        return cal.get(Calendar.YEAR);
    }

    private void setMonthTime() {
        dataset.clear();
        List<Statistics> monthList = new ArrayList<Statistics>();
        int year1 = jYearChooser3.getYear();
        int month1 = jMonthChooser1.getMonth();
        int year2 = jYearChooser4.getYear();
        int month2 = jMonthChooser2.getMonth();
        for (Statistics i : listItem) {
            Date t = i.getCreateDate();
            int year = getYear(t);
            int month = getMonth(t);
            if (compareMonth(year1, month1, year, month) && compareMonth(year, month, year2, month2)) {
                if (!monthList.contains(i)) {
                    i.setI(1);
                    monthList.add(i);
                } else {
                    int index = monthList.indexOf(i);
                    Statistics newEle = monthList.get(index);
                    newEle = new Statistics(newEle.getCreateDate(), newEle.getCount(), 1);
                    newEle.add(i.getCount());
                    monthList.remove(index);
                    monthList.add(newEle);
                }
            }
        }
        while (compareMonth(year1, month1, year2, month2)) {
            java.sql.Date t = setMonth(month1, year1);
            Statistics s = new Statistics(t, 0, 1);
            if (!monthList.contains(s)) {
                monthList.add(s);
            }
            t = addMonth(t);
            month1 = getMonth(t);
            year1 = getYear(t);
        }
        Collections.sort(monthList);
        year1 = -1;
        for (Statistics i : monthList) {
            year2 = i.getYear();
            dataset.addValue(i.getCount(), "",
                    "" + ((int) i.getMonth() + (int) 1) + (year1 == year2 ? "" : ("/" + year2)));
            year1 = year2;
        }
    }

    private boolean compareMonth(int year1, int month1, int year2, int month2) {
        if (year1 < year2) {
            return true;
        }
        if (year1 == year2) {
            return month1 <= month2;
        }
        return false;
    }

    private java.sql.Date addMonth(java.sql.Date t) {
        Calendar cal = Calendar.getInstance();
        cal.setTime(t);
        cal.set(Calendar.MONTH, getMonth(t) + 1);
        return new java.sql.Date(cal.getTime().getTime());
    }

    private int getMonth(Date date) {
        Calendar cal = Calendar.getInstance();
        cal.setTime(date);
        return cal.get(Calendar.MONTH);
    }

    private java.sql.Date setMonth(int month, int year) {
        Calendar cal = Calendar.getInstance();
        Date value;
        cal.set(Calendar.YEAR, year);
        cal.set(Calendar.MONTH, month);
        value = cal.getTime();
        return new java.sql.Date(value.getTime());
    }

    private void setDayTime() {
        dataset.clear();
        List<Statistics> dayList = new ArrayList<Statistics>();
        int year1 = getYear(jDateChooser.getDate());
        int month1 = getMonth(jDateChooser.getDate());
        int day1 = getDay(jDateChooser.getDate());
        int year2 = getYear(jDateChooser1.getDate());
        int month2 = getMonth(jDateChooser1.getDate());
        int day2 = getDay(jDateChooser1.getDate());
        for (Statistics i : listItem) {
            Date t = i.getCreateDate();
            int year = getYear(t);
            int month = getMonth(t);
            int day = getDay(t);
            if (compareDay(year1, month1, day1, year, month, day)
                    && compareDay(year, month, day, year2, month2, day2)) {
                if (!dayList.contains(i)) {
                    i.setI(2);
                    dayList.add(i);
                } else {
                    int index = dayList.indexOf(i);
                    Statistics newEle = dayList.get(index);
                    newEle = new Statistics(newEle.getCreateDate(), newEle.getCount(), 2);
                    newEle.add(i.getCount());
                    dayList.remove(index);
                    dayList.add(newEle);
                }
            }
        }
        while (compareDay(year1, month1, day1, year2, month2, day2)) {
            java.sql.Date t = setDay(day1, month1, year1);
            Statistics s = new Statistics(t, 0, 2);
            if (!dayList.contains(s)) {
                dayList.add(s);
            }
            t = addDay(t);
            day1 = getDay(t);
            month1 = getMonth(t);
            year1 = getYear(t);
        }
        Collections.sort(dayList);
        year1 = month1 = -1;
        for (Statistics i : dayList) {
            year2 = i.getYear();
            month2 = i.getMonth();
            dataset.addValue(i.getCount(), "", "" + i.getDay() + (month1 == month2 ? ""
                    : ("/" + ((int) month2 + (int) 1) + (year1 == year2 ? "" : ("/" + year2)))));
            month1 = month2;
            year1 = year2;
        }
    }

    private boolean compareDay(int year1, int month1, int day1, int year2, int month2, int day2) {
        if (year1 < year2) {
            return true;
        }
        if (year1 == year2) {
            if (month1 < month2) {
                return true;
            }
            if (month1 == month2) {
                return day1 <= day2;
            }
            return false;
        }
        return false;
    }

    private java.sql.Date addDay(java.sql.Date t) {
        Calendar cal = Calendar.getInstance();
        cal.setTime(t);
        cal.set(Calendar.DAY_OF_MONTH, getDay(t) + 1);
        return new java.sql.Date(cal.getTime().getTime());
    }

    private java.sql.Date setDay(int day, int month, int year) {
        Calendar cal = Calendar.getInstance();
        Date value;
        cal.set(Calendar.YEAR, year);
        cal.set(Calendar.MONTH, month);
        cal.set(Calendar.DAY_OF_MONTH, day);
        value = cal.getTime();
        return new java.sql.Date(value.getTime());
    }

    private int getDay(Date date) {
        Calendar cal = Calendar.getInstance();
        cal.setTime(date);
        return cal.get(Calendar.DAY_OF_MONTH);
    }
}
